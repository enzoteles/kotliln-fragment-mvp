// Generated by dagger.internal.codegen.ComponentProcessor (https://google.github.io/dagger).
package com.example.enzoteles.arquiteturamvpk.mvp.login;

import dagger.internal.Preconditions;
import javax.inject.Provider;

public final class DaggerOnLoginComponent implements OnLoginComponent {
  private Provider<OnLoginMVP.presenter> provideLoginPresenterProvider;

  private Provider<OnLoginMVP.interactor> provideLoginInteractorProvider;

  private DaggerOnLoginComponent(Builder builder) {
    assert builder != null;
    initialize(builder);
  }

  public static Builder builder() {
    return new Builder();
  }

  public static OnLoginComponent create() {
    return builder().build();
  }

  @SuppressWarnings("unchecked")
  private void initialize(final Builder builder) {

    this.provideLoginPresenterProvider =
        LoginModule_ProvideLoginPresenterFactory.create(builder.loginModule);

    this.provideLoginInteractorProvider =
        LoginModule_ProvideLoginInteractorFactory.create(builder.loginModule);
  }

  @Override
  public OnLoginMVP.presenter provideLoginPresenter() {
    return provideLoginPresenterProvider.get();
  }

  @Override
  public OnLoginMVP.interactor provideLoginInteractor() {
    return provideLoginInteractorProvider.get();
  }

  public static final class Builder {
    private LoginModule loginModule;

    private Builder() {}

    public OnLoginComponent build() {
      if (loginModule == null) {
        this.loginModule = new LoginModule();
      }
      return new DaggerOnLoginComponent(this);
    }

    public Builder loginModule(LoginModule loginModule) {
      this.loginModule = Preconditions.checkNotNull(loginModule);
      return this;
    }
  }
}
